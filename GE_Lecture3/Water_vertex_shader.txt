cbuffer VSConstants
{
    float4x4 VP;
    float4x4 W;
    float time;
    float waveAmplitude;
    float waveFrequency;
    float waveSpeed;
};

struct VS_INPUT
{
	float4 Pos : POS;
	float3 Normal : NORMAL;
   // float3 Tangent : TANGENT; // Keep this 
	float2 TexCoords : TEXCOORD;
};


struct PS_INPUT
{
	float4 Pos : SV_POSITION;
	float3 Normal : NORMAL;
   // float3 Tangent : TANGENT; 
	float2 TexCoords : TEXCOORD;
};

//PS_INPUT VS(VS_INPUT input)
//{
//	PS_INPUT output;
  //  float wave = sin(time * waveSpeed + (input.Pos.x + input.Pos.z) * waveFrequency) * waveAmplitude; // simple sin wave
//    float3 displacedPos = float3(input.Pos.x, input.Pos.y + wave, input.Pos.z);
//
  //  output.Pos = mul(input.Pos, W);
//	output.Pos = mul(output.Pos, VP);
 //   output.Pos = mul(float4(displacedPos, 1.0f), output.Pos);
 //   output.TexCoords = input.TexCoords;
  //  output.Normal = mul(input.Normal, (float3x3)W); // might need recalculating normal for more effects; for now, keep it 
  //  return output;
//}

PS_INPUT VS(VS_INPUT input)
{
    PS_INPUT output;

    float wave = sin(time * waveSpeed + (input.Pos.x + input.Pos.z) * waveFrequency) * waveAmplitude;
    float3 displacedPos = float3(input.Pos.x, input.Pos.y + wave, input.Pos.z);
  
    float4 worldPos = mul(W, float4(displacedPos, 1.0f));
    output.Pos = mul(VP, worldPos);
    output.Normal = mul((float3x3)W, input.Normal);
    output.TexCoords = input.TexCoords;

    return output;
}